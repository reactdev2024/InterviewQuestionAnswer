1- What Is Dependency Injection?
Answer: is a s/w design pattern allows us to develop loosely coupled app.

1- What Is Dependency Injection?
Answer: is a s/w design pattern allows us to develop loosely coupled app.

2- View Data:
	- pass data from controller to view.
	- derived from viewdata dictionary class.
	- required typecasting for complex data type for error check & null value.
	- available for current request only

3- View Bag:
	- pass data from controller to view
	- is a dynamic property.
	- available for current request only.
	- doesn't required typecasting for complex datatype.

4- Temp Data:
	- is derived from TempData dictionary class
	- used to pass data from current request to next request.
	- after read Temp data if we want to save and pass to next http request then we will use keep() method.
	- if we want to only keep specific temp data then we can pass tempdata name like keep('userdetail1').
	- It keep the information if we move from one controller to another controller or from one action method to another action method.
	- required type casting for complex data type or null value checking.

5- What is the purpose of the Startup.cs file in an ASP.NET Core application?
	- The Startup.cs file is where you configure the services and the request pipeline for an ASP.NET Core application. 
	It contains two methods:
		- ConfigureServices: Used to add services to the applicationâ€™s DI container.
		- Configure: Used to define how the app responds to HTTP requests, essentially setting up the request processing pipeline with middleware.

6- What is the role of the appsettings.json file in ASP.NET Core? How do you access settings from this file in your application?
	- is used for storing configuration settings like connection strings, logging configurations, and application-specific settings. 
	- Settings from this file can be accessed in the application through the IConfiguration interface, which is typically injected into classes where 			configurations are needed.

	Role of appsettings.json:
		- Centralized Configuration: Keeps all settings in one place.
		- Environment-Specific Settings: Can be overridden using appsettings.Development.json, appsettings.Production.json, etc.
		- Supports Hierarchical Data: Settings can be nested and organized.
		- Easily Readable & Editable: JSON format is developer-friendly.

Example: 
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=myServer;Database=myDb;User Id=myUser;Password=myPass;"
  },
  "AppSettings": {
    "SiteTitle": "My Web App",
    "PageSize": 20
  },.0
6
  "Logging": {
    "LogLevel": {
      "Default": "Information"
    }
  }
}

7- How to Access Settings in ASP.NET Core?
	public class HomeController : Controller
	{
	    private readonly IConfiguration _configuration;
	
	    public HomeController(IConfiguration configuration)
	    {
	        _configuration = configuration;
	    }
	
	    public IActionResult Index()
	    {
	        string siteTitle = _configuration["AppSettings:SiteTitle"];
	        int pageSize = Convert.ToInt32(_configuration["AppSettings:PageSize"]);
	        return View();
	    }
	}
=================================== OR ===============================================
	public class AppSettings
	{
	    public string SiteTitle { get; set; }
	    public int PageSize { get; set; }
	}

	Register in Program.cs or Startup.cs:
	builder.Services.Configure<AppSettings>(builder.Configuration.GetSection("AppSettings"));

Inject via IOptions<AppSettings>:
	public class HomeController : Controller
	{
	    private readonly AppSettings _appSettings;
	
	    public HomeController(IOptions<AppSettings> appSettings)
	    {
	        _appSettings = appSettings.Value;
	    }
	
	    public IActionResult Index()
	    {
	        string title = _appSettings.SiteTitle;
	        return View();
	    }
	}
